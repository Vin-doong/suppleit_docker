// src/pages/Auth/ChangePassword.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Card, Form, Button, Alert } from 'react-bootstrap';
import { changePassword, checkAccountType } from '../../services/api';
import Header from '../../components/include/Header';
import Footer from '../../components/include/Footer';

const ChangePassword = () => {
  const navigate = useNavigate();
  const [oldPassword, setOldPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isSocialAccount, setIsSocialAccount] = useState(false);
  const [socialType, setSocialType] = useState('');
  const [checkingAccountType, setCheckingAccountType] = useState(true);

  // 비밀번호 표시 상태
  const [showOldPassword, setShowOldPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  // 비밀번호 유효성 검사 상태
  const [validation, setValidation] = useState({
    passwordChecked: false,
    passwordMatch: false
  });

  // 로그인 상태 및 소셜 계정 확인
  useEffect(() => {
    const checkAuth = async () => {
      const accessToken = localStorage.getItem('accessToken');
      if (!accessToken) {
        navigate('/login');
        return;
      }
      
      setIsAuthenticated(true);
      
      try {
        // 계정 유형 확인 API 호출
        const response = await checkAccountType();
        setIsSocialAccount(response.data.isSocialAccount);
        setSocialType(response.data.socialType);
        
        // 소셜 계정인 경우 3초 후 마이페이지로 리다이렉트
        if (response.data.isSocialAccount) {
          setTimeout(() => {
            navigate('/mypage');
          }, 3000);
        }
      } catch (error) {
        console.error('계정 유형 확인 오류:', error);
        setError('계정 정보를 확인하는 중 오류가 발생했습니다.');
      } finally {
        setCheckingAccountType(false);
      }
    };
    
    checkAuth();
  }, [navigate]);

  // 비밀번호 유효성 검사
  const validatePassword = (password) => {
    // 최소 8자, 숫자와 특수문자 포함 필수
    const regex = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/;
    return regex.test(password);
  };

  // 새 비밀번호 입력 처리
  const handleNewPasswordChange = (e) => {
    const value = e.target.value;
    setNewPassword(value);
    
    // 비밀번호 유효성 검사
    const isValid = validatePassword(value);
    
    // 비밀번호 일치 여부 확인
    const passwordsMatch = value === confirmPassword && value !== '';
    
    setValidation({
      passwordChecked: isValid,
      passwordMatch: passwordsMatch
    });
  };

  // 비밀번호 확인 입력 처리
  const handleConfirmPasswordChange = (e) => {
    const value = e.target.value;
    setConfirmPassword(value);
    
    // 비밀번호 일치 여부 확인
    const passwordsMatch = newPassword === value && value !== '';
    
    setValidation({
      ...validation,
      passwordMatch: passwordsMatch
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess(false);
    
    // 입력값 검증
    if (!oldPassword || !newPassword || !confirmPassword) {
      setError('모든 필드를 입력해주세요.');
      return;
    }
    
    if (newPassword !== confirmPassword) {
      setError('새 비밀번호와 확인 비밀번호가 일치하지 않습니다.');
      return;
    }
    
    if (!validatePassword(newPassword)) {
      setError('비밀번호는 8자 이상이며, 숫자와 특수문자를 포함해야 합니다.');
      return;
    }
    
    try {
      setLoading(true);
      
      // 백엔드 API 호출 - 비밀번호 변경
      const response = await changePassword(oldPassword, newPassword);
      
      if (response.data.success) {
        setSuccess(true);
        // 필드 초기화
        setOldPassword('');
        setNewPassword('');
        setConfirmPassword('');
        setValidation({
          passwordChecked: false,
          passwordMatch: false
        });
        
        // 3초 후 마이페이지로 이동
        setTimeout(() => {
          navigate('/mypage');
        }, 3000);
      } else {
        setError(response.data.message || '비밀번호 변경에 실패했습니다.');
      }
    } catch (error) {
      console.error('비밀번호 변경 오류:', error);
      setError(error.response?.data?.message || '서버와의 통신 중 오류가 발생했습니다.');
    } finally {
      setLoading(false);
    }
  };

  // 소셜 타입에 따른 한글 이름 반환
  const getSocialTypeName = (type) => {
    switch(type) {
      case 'GOOGLE': return '구글';
      case 'NAVER': return '네이버';
      case 'KAKAO': return '카카오';
      default: return '소셜';
    }
  };

  // 로딩 중인 경우 로딩 화면 표시
  if (checkingAccountType) {
    return (
      <>
        <Header />
        <Container style={{ marginTop: '100px', maxWidth: '600px' }}>
          <Card className="p-4 shadow-lg">
            <Card.Body className="text-center">
              <div className="spinner-border text-primary mb-3" role="status">
                <span className="visually-hidden">로딩 중...</span>
              </div>
              <p>계정 정보를 확인하는 중입니다...</p>
            </Card.Body>
          </Card>
        </Container>
        <Footer />
      </>
    );
  }

  // 인증되지 않은 경우 렌더링하지 않음
  if (!isAuthenticated) {
    return null;
  }

  // 소셜 계정인 경우 안내 메시지 표시
  if (isSocialAccount) {
    return (
      <>
        <Header />
        <Container style={{ marginTop: '100px', maxWidth: '600px' }}>
          <Card className="p-4 shadow-lg">
            <Card.Body className="text-center">
              <Alert variant="warning">
                <h4>{getSocialTypeName(socialType)} 계정은 비밀번호 변경이 불가능합니다</h4>
                <p>소셜 로그인 계정의 비밀번호는 해당 서비스에서 관리됩니다.</p>
                <p>잠시 후 마이페이지로 이동합니다.</p>
              </Alert>
              <Button 
                variant="secondary" 
                onClick={() => navigate('/mypage')}
                className="mt-3"
              >
                마이페이지로 돌아가기
              </Button>
            </Card.Body>
          </Card>
        </Container>
        <Footer />
      </>
    );
  }

  return (
    <>
      <Header />
      <Container style={{ marginTop: '100px', maxWidth: '600px' }}>
        <Card className="p-4 shadow-lg">
          <Card.Body>
            <h2 className="text-center mb-4" style={{ color: '#2A9D8F', fontWeight: 'bold' }}>
              비밀번호 변경
            </h2>
            
            {error && <Alert variant="danger">{error}</Alert>}
            {success && (
              <Alert variant="success">
                비밀번호가 성공적으로 변경되었습니다. 잠시 후 마이페이지로 이동합니다.
              </Alert>
            )}
            
            <Form onSubmit={handleSubmit}>
              {/* 현재 비밀번호 입력 필드 */}
              <Form.Group className="mb-3">
                <Form.Label>현재 비밀번호</Form.Label>
                <div className="position-relative">
                  <Form.Control
                    type={showOldPassword ? "text" : "password"}
                    value={oldPassword}
                    onChange={(e) => setOldPassword(e.target.value)}
                    placeholder="현재 비밀번호를 입력하세요"
                    required
                  />
                  <button
                    type="button"
                    className="btn position-absolute end-0 top-0 h-100 d-flex align-items-center border-0 bg-transparent"
                    onClick={() => setShowOldPassword(!showOldPassword)}
                    style={{ background: 'none', border: 'none' }}
                  >
                    <i className={`fas ${showOldPassword ? 'fa-eye-slash' : 'fa-eye'}`}></i>
                  </button>
                </div>
              </Form.Group>
              
              {/* 새 비밀번호 입력 필드 */}
              <Form.Group className="mb-3">
                <Form.Label>새 비밀번호</Form.Label>
                <div className="position-relative">
                  <Form.Control
                    type={showNewPassword ? "text" : "password"}
                    value={newPassword}
                    onChange={handleNewPasswordChange}
                    placeholder="새 비밀번호를 입력하세요"
                    required
                  />
                  <button
                    type="button"
                    className="btn position-absolute end-0 top-0 h-100 d-flex align-items-center border-0 bg-transparent"
                    onClick={() => setShowNewPassword(!showNewPassword)}
                    style={{ background: 'none', border: 'none' }}
                  >
                    <i className={`fas ${showNewPassword ? 'fa-eye-slash' : 'fa-eye'}`}></i>
                  </button>
                </div>
                <Form.Text className={validation.passwordChecked ? "text-success" : "text-muted"}>
                  {validation.passwordChecked 
                    ? "✅ 비밀번호가 유효합니다." 
                    : "비밀번호는 8자 이상, 숫자와 특수문자를 포함해야 합니다."}
                </Form.Text>
              </Form.Group>
              
              {/* 새 비밀번호 확인 필드 */}
              <Form.Group className="mb-4">
                <Form.Label>새 비밀번호 확인</Form.Label>
                <div className="position-relative">
                  <Form.Control
                    type={showConfirmPassword ? "text" : "password"}
                    value={confirmPassword}
                    onChange={handleConfirmPasswordChange}
                    placeholder="새 비밀번호를 다시 입력하세요"
                    required
                  />
                  <button
                    type="button"
                    className="btn position-absolute end-0 top-0 h-100 d-flex align-items-center border-0 bg-transparent"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    style={{ background: 'none', border: 'none' }}
                  >
                    <i className={`fas ${showConfirmPassword ? 'fa-eye-slash' : 'fa-eye'}`}></i>
                  </button>
                </div>
                {confirmPassword && (
                  <Form.Text className={validation.passwordMatch ? "text-success" : "text-danger"}>
                    {validation.passwordMatch 
                      ? "✅ 비밀번호가 일치합니다." 
                      : "❌ 비밀번호가 일치하지 않습니다."}
                  </Form.Text>
                )}
              </Form.Group>
              
              <div className="d-flex justify-content-between">
                <Button
                  variant="secondary"
                  onClick={() => navigate('/mypage')}
                  disabled={loading}
                >
                  취소
                </Button>
                <Button
                  type="submit"
                  style={{ backgroundColor: '#2A9D8F', border: 'none' }}
                  disabled={loading || !validation.passwordChecked || !validation.passwordMatch}
                >
                  {loading ? '처리 중...' : '비밀번호 변경'}
                </Button>
              </div>
            </Form>
          </Card.Body>
        </Card>
      </Container>
      <Footer />
    </>
  );
};

export default ChangePassword;